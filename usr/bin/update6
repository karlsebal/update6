#!/bin/sh

## update freedns domain at afraid.org 

# set command for comfortable logging
log="logger -t update6 "

# extended regex, we call grep -E
ip6regex="([0-9a-f]{0,4}:){2,7}[0-9a-f]{0,4}"

# we need a variable for the sleep process
# so we can cleanup that as well when exit
unset sleepid

# lets have something to check whether
# update was forced
unset forced

# help message
print_help() {
	echo usage: "$0" "{start|stop|force}"
	echo use logread to check output
	exit
}

# cleanup when caught signal 
cleanup() {
	# remove pid file
	[ -e /var/run/update6.pid ] && rm /var/run/update6.pid >/dev/null 2>&1 || $log "Error: No pid file."
	# kill sleep
	[ $sleepid ] && kill $sleepid

	$log terminating..
}

die(){
	cleanup
	exit
}

diehard() {
	cleanup
	trap - int
	kill -int $$
}

forceUpdate() {
	get_current
	do_update
	forced=1
}

trap die TERM
trap diehard INT
trap forceUpdate HUP


get_current() {
	current6addr=$(ip -6 addr show eth0.2 | grep global\ dynamic | grep -oE "$ip6regex")
}

get_registered() {
	# dots in grepdomain need to be escaped
	grepdomain=$(echo "$domain" | sed 's:\.:\\\.:g')

	# fetch lookup
	lookup=$(nslookup "$domain" 2>/dev/null | grep -A5 "Name:.*$grepdomain")
	
	# extract ipv6address
	registered6addr=$(echo "$lookup" | grep -oE "$ip6regex")
	
	if [ -z "$registered6addr" ]; then
		registered6addr="error"
		$log "ERROR: something went wrong while looking up $domain"
	fi
}

create_url() {
	updateURL="http://freedns.afraid.org/dynamic/update.php?$updateKey&address=$current6addr"
}

create_call() {
	create_url
	call="curl -s $updateURL"

	# do nothing if we got no ipv6 address
	 [ -z "$current6addr" ] && { $log ERROR no ipv6 address obtained; call=":"; }

}

# updates with ip address obtained by get_current
do_update() {
		create_call
		$log "updating $domain"
		$log "curl: $($call 2>&1)"
}

loadSettings() {
	config_get checkInterval "$1" checkInterval
	config_get domain "$1" domain
	config_get updateKey "$1" updateKey
	config_get enabled "$1" enabled
}

[ "$1" = "help" ] || [ "$1" = "-h" ] || [ "$1" = "--help" ] && print_help


# load config
. /lib/functions.sh

config_load update6
config_foreach loadSettings settings

# service enabled? default is yes.
[ "${enabled:-1}" = "1" ] || { $log service disabled; exit 0; } 

# new PID
echo "$$" > /var/run/update6.pid

# main loop
while [ true ]; do
	# if forced just unset var and go back to sleep
	[ $forced ] && unset forced || {
		get_current
		get_registered

		if [ "$current6addr" != "$registered6addr" ]; then
			do_update
		else
			$log "No change. No update."
		fi

		sleep $checkInterval &
		sleepid=$!
	}	

	wait
	unset sleepid
done
